#!/usr/bin/python
import os, sys
import xml.etree.ElementTree as et
from createDB import *

# -------------- Functions --------------
#############################
#	Function "validateFile"
#		Checks if there is a provided file, and asks for it otherwise. 
#		"model_file" stores the path value.
#############################
def validateFile():
	# If no file is provided, ask for it
	if len(sys.argv) == 1:
		model_file = str(raw_input("Enter the name of the xml file descriptor: "))
	# If a file is provided, check if it is valid
	elif len(sys.argv) == 2:
		filePath = sys.argv[1]
		if os.path.exists(filePath):
			model_file = filePath
		# Else, ask for a new path
		else:
			model_file = str(raw_input("The file does not exist. Enter a valid path: "))
	return model_file

#############################
#	Function "updateDatabase"
#		Given the data to populate the database, it proceeds to do so.
#
#	@param: data, the information to build/update the database
#############################
def updateDatabase(data):
	return


#############################
#	Function "readFile"
#		Given a valid file, proceeds to read it and to organize it in order to provide
#		info to build the database.
#
#	@param: model_file
#############################
def readFile(model_file):
	tree = et.parse(model_file)
	root = tree.getroot()
	# Dictionary containing the information related to the system
	system = {}
	# Building up the system structure
	for part in root:
		# PART = HW & SW
		# Create a dict for every part (HW & SW)
		system[part.tag] = {}

		for element in part:
			# ELEMENT = WEB-SERVER, DATABASE-SERVER, ETC

			# Get the identifier of each element of each part
			element_identifier = element.attrib.get('identifier')
			# Create a dict for every element
			system[part.tag][element.tag] = {}
			system[part.tag][element.tag][element_identifier]={}
			
			for instance in element:
				# Use the identifier of each element as the key of the dict, and adding it to a list
				instance_identifier = instance.attrib.get('name')
				print instance_identifier
				# Append the characteristics of each element
				system[part.tag][element.tag][element_identifier][instance_identifier]={}
				for charac in instance:
					system[part.tag][element.tag][element_identifier][instance_identifier].append([charac.tag,charac.text])
	print system
			
	return system


# -------------- Program --------------

model_file = validateFile()
system_dict = readFile(model_file)
created = updateDatabase(system_dict)

"""
{'hardware': 
	{'voip-server': 
		{'h3': 
			{'h31': [['firmware', None], ['specifications', None], ['specific-software', None], ['rating', None], ['comments', None]]}
		}, 

createDB(name=system)

for part in root:

	createTable( name = part) # Part = hw, sw

	for element in part:
		
		createTable(name = element) # Element = web-server ; voip-server ; 

		for instance in element:

			for charac in instance:
				addToTable(tableName=part , id = instance, data = charac.tag, charac.text)





	for part in root:
		for element in part:
			for charac in element:
				system[part.tag][element.tag].append(charac.text)

	print system
	#updateDatabase(data)
	return system

"""
# print et.tostring(root, encoding="us-ascii", method="xml")